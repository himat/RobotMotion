<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="HelloWorld" id="5" localization="8" tooltip="" x="282" y="53">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import almath
import time


isAbsolute = True

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy("ALTextToSpeech")
        self.motionProxy = ALProxy("ALMotion")

        self.memoryProxy = ALProxy("ALMemory")

        self.ALMEMORY_KEY_NAMES = [
            "Motion/Position/Sensor/LHand",
            "Device/SubDeviceList/RHand/Touch/Left/Sensor/Value",
            "Device/SubDeviceList/RHand/Position/Sensor/Value",
            "Device/SubDeviceList/HeadYaw/Position/Sensor/Value",
            "Device/SubDeviceList/HeadYaw/Speed/Sensor/Value",
            "Motion/Position/Sensor/HeadYaw",
            "Motion/Position/Sensor/HeadPitch",
            ]
            #"Device/SubDeviceList/HeadYaw/Position/Actuator/Value",



        self.folderName = None
        self.stop = False

        #import movecontrol

    def onLoad(self):
        #put initialization code here


        pass

    def onUnload(self):
        #put clean-up code here
        print "FINISHED"
        self.stop = True



    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box

        import movecontrol
        reload(movecontrol)

        print "starting onstart"
        self.log("starting onstart log")

        # Print all memory device names
#        mem_names = self.memoryProxy.getDataListName()
#        mem_file = "/Users/hima/OneDrive/_CMU/Research/allMemoryDevices.txt"
#        with open(mem_file, "w") as fp:

#            for line in mem_names:
#                fp.write(line)
#                fp.write("\n")

        line = []
        for key in self.ALMEMORY_KEY_NAMES:
            value = self.memoryProxy.getData(key)
            line.append(value)
        print "before line: ", line

        data = []
        movecontrol.print_test()

        # Left side
        data += movecontrol.headSide(self, "left")
        data += movecontrol.headDown(self)

        data += movecontrol.armUp(self, "left")
        data += movecontrol.armOut(self, "left")

        data += movecontrol.handClose(self, "left")
        data += movecontrol.handOpen(self, "left")

        data += movecontrol.legForward(self, "left")
        data += movecontrol.leanSide(self, "left")

        # Right side
        data += movecontrol.headSide(self, "right")

        data += movecontrol.armUp(self, "right")
        data += movecontrol.armOut(self, "right")

        data += movecontrol.handClose(self, "right")
        data += movecontrol.handOpen(self, "right")

        data += movecontrol.legForward(self, "right")
        data += movecontrol.leanSide(self, "right")




        #self.tts.say("parallel speech")


        line = []
        for key in self.ALMEMORY_KEY_NAMES:
            value = self.memoryProxy.getData(key)
            line.append(value)
        print "after line: ", line

        #output = os.path.abspath("robotMotion.csv")
        output = os.getcwd()
        print "output? ", output
        output = "/Users/hima/OneDrive/_CMU/Research/RobotMotion/NAO_poses/robotMotion.csv"

        print "output path", output


        with open(output, "w") as fp:
            prefix_len = len("Motion/Position/Sensor/")
            sensor_names = [s[prefix_len:] for s in movecontrol.ALL_SENSOR_KEY_NAMES]
            sensor_names += ["Label"]
            fp.write(",".join(sensor_names))
            fp.write("\n")

            for line in data:
                fp.write(",".join(str(x) for x in line))
                fp.write("\n")

        print "results written to", output



        self.motionProxy.setStiffnesses("Head", 0.0)



    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        print "STOPPED"
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="Get Attached File" id="2" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="93" y="55">
                            <bitmap>media/images/box/folder.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.framemanager = ALProxy("ALFrameManager")

    def onInput_onStart(self):
        self.folderName = self.framemanager.getBehaviorPath(self.behaviorId) + self.getParameter("File name")

        import sys
        print "thing: ", self.folderName
        if self.folderName not in sys.path:
            sys.path.insert(0, self.folderName)

        self.onStopped()

    def onUnload(self):
        if self.folderName in sys.path:
            sys.path.remove(self.folderName)]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                            <Parameter name="File name" inherits_from_parent="1" content_type="4" value="/.." default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                        </Box>
                        <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="3" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
